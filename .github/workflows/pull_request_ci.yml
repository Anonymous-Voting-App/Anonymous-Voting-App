name: Pull Request / Dev CI

on:
    pull_request:
        branches:
            - dev

jobs:
    check-style:
        name: Check code style
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@main
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run check-style

    frontend-test:
        name: Test frontend
        runs-on: ubuntu-latest
        needs: check-style

        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@main
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run test:ci
            - uses: codecov/codecov-action@v3
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: dev,unit,frontend
                  fail_ci_if_error: true

    frontend-deploy-dev:
        name: Deploy frontend to dev environment
        needs: frontend-test
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read

        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@main
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run build:ci

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  role-to-assume: ${{ secrets.AWS_DEV_ROLE_TO_ASSUME }}
                  aws-region: eu-north-1

            - name: Copy files to the S3 with the AWS CLI
              run: |
                  aws s3 sync ./build s3://dev.knowit-anonymous-voting-app.aws.cybercom.dev

    backend-test:
        name: Test backend
        needs: check-style
        runs-on: ubuntu-latest

        defaults:
            run:
                working-directory: backend

        steps:
            - uses: actions/checkout@main
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run test:coverage
            - uses: codecov/codecov-action@v3
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: dev,unit,backend
                  fail_ci_if_error: true

    backend-deploy-dev:
        name: Deploy backend to dev environment
        needs: backend-test
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read

        defaults:
            run:
                working-directory: backend

        env:
            AWS_REGION: eu-north-1
            ECR_REPOSITORY: ava-backend/dev
            ECS_SERVICE: AVABackendDevService
            ECS_CLUSTER: AVABackendDevCluster
            ECS_TASK_DEFINITION: .aws/dev_task_definition.json
            CONTAINER_NAME: AVABackendDevContainer

        steps:
            # Checks out the repository
            - name: Checkout Repo
              uses: actions/checkout@main

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  role-to-assume: ${{ secrets.AWS_DEV_ROLE_TO_ASSUME }}
                  aws-region: eu-north-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: ${{ env.ECS_TASK_DEFINITION }}
                  container-name: ${{ env.CONTAINER_NAME }}
                  image: ${{ steps.build-image.outputs.image }}

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  service: ${{ env.ECS_SERVICE }}
                  cluster: ${{ env.ECS_CLUSTER }}
                  wait-for-service-stability: false
