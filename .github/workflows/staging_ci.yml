name: Staging CI

on:
    push:
        branches:
            - dev

jobs:
    scan-code:
        name: GitGuardian scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0 # fetch all history so multiple commits can be scanned
            - name: GitGuardian scan
              uses: GitGuardian/ggshield-action@master
              env:
                  GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
                  GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
                  GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
                  GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
                  GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

    check-for-changes:
        name: Check for changes
        runs-on: ubuntu-latest
        outputs:
            backend: ${{ steps.filter.outputs.backend }}
            frontend: ${{ steps.filter.outputs.frontend }}
        steps:
            - uses: actions/checkout@main
            - uses: dorny/paths-filter@v2
              id: filter
              with:
                  filters: |
                      backend:
                      - 'backend/**'
                      frontend:
                      - 'frontend/**'

    check-style-frontend:
        name: Check frontend code style
        needs: [scan-code, check-for-changes]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@main
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run prettier:frontend

    frontend-lint:
        name: Lint frontend
        needs: check-style-frontend
        runs-on: ubuntu-latest

        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@main
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run lint

    frontend-test:
        name: Test frontend
        runs-on: ubuntu-latest
        needs: frontend-lint

        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@main
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run test:ci
            - uses: codecov/codecov-action@v3
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: staging,unit,frontend
                  fail_ci_if_error: true

    frontend-deploy-staging:
        name: Deploy frontend to staging environment
        needs: frontend-test
        if: ${{ needs.check-for-changes.outputs.frontend == 'true' || contains(github.event.head_commit.message, 'ci force') }}
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read

        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@main
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run build:ci

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  role-to-assume: ${{ secrets.AWS_STAGING_ROLE_TO_ASSUME }}
                  aws-region: eu-north-1

            - name: Copy files to the S3 with the AWS CLI
              run: |
                  aws s3 sync ./build s3://staging.knowit-anonymous-voting-app.aws.cybercom.dev

    check-style-backend:
        name: Check backend code style
        needs: [scan-code, check-for-changes]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@main
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run prettier:backend

    backend-lint:
        name: Lint backend
        needs: check-style-backend
        runs-on: ubuntu-latest

        defaults:
            run:
                working-directory: backend

        steps:
            - uses: actions/checkout@main
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run lint

    backend-test:
        name: Test backend
        needs: backend-lint
        runs-on: ubuntu-latest

        defaults:
            run:
                working-directory: backend

        steps:
            - uses: actions/checkout@main
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run test:coverage
            - uses: codecov/codecov-action@v3
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  flags: staging,unit,backend
                  fail_ci_if_error: true

    backend-deploy-staging:
        name: Deploy backend to staging environment
        needs: backend-test
        if: ${{ needs.check-for-changes.outputs.backend == 'true' || contains(github.event.head_commit.message, 'ci force') }}
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read

        defaults:
            run:
                working-directory: backend

        env:
            AWS_REGION: eu-north-1
            ECR_REPOSITORY: ava-backend/staging
            ECS_SERVICE: AVABackendStagingService
            ECS_CLUSTER: AVABackendStagingCluster
            ECS_TASK_DEFINITION: .aws/staging_task_definition.json
            CONTAINER_NAME: AVABackendStagingContainer

        steps:
            # Checks out the repository
            - name: Checkout Repo
              uses: actions/checkout@main

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  role-to-assume: ${{ secrets.AWS_STAGING_ROLE_TO_ASSUME }}
                  aws-region: eu-north-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: ${{ env.ECS_TASK_DEFINITION }}
                  container-name: ${{ env.CONTAINER_NAME }}
                  image: ${{ steps.build-image.outputs.image }}

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  service: ${{ env.ECS_SERVICE }}
                  cluster: ${{ env.ECS_CLUSTER }}
                  wait-for-service-stability: false
