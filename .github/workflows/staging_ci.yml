name: Staging CI

on:
    push:
        branches:
            - dev
    workflow_dispatch:

env:
    # User specified
    AWS_REGION: eu-north-1
    ECR_REPOSITORY: ava/backend-staging
    ECS_SERVICE: ava-staging-backend-service
    ECS_CLUSTER: ava-staging-backend-cluster
    ECS_TASK: ava-staging-backend-task
    CONTAINER_NAME: ava-staging-backend-container
    FRONTEND_BUCKET: ava-staging-s3-frontend
    BACKEND_URL: 'https://staging.lb.knowit-anonymous-voting-app.aws.cybercom.dev'

    # Secrets
    DATABASE_URL: ${{ secrets.STAGING_DB_URL }}
    GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
    CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    AWS_STAGING_ROLE_TO_ASSUME: ${{ secrets.AWS_STAGING_ROLE_TO_ASSUME }}

    # Automatic
    GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
    GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
    GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
    GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

jobs:
    scan-code:
        name: GitGuardian scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0 # fetch all history so multiple commits can be scanned
            - name: GitGuardian scan
              uses: GitGuardian/ggshield-action@master
              env:
                  GITGUARDIAN_API_KEY: ${{ env.GITGUARDIAN_API_KEY }}

    check-style-frontend:
        name: Check frontend code style
        needs: scan-code
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run prettier:frontend

    frontend-lint:
        name: Lint frontend
        needs: scan-code
        runs-on: ubuntu-latest

        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run lint -- --max-warnings=0

    frontend-test:
        name: Test frontend
        runs-on: ubuntu-latest
        needs: [check-style-frontend, frontend-lint]

        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run test:ci
            - uses: codecov/codecov-action@v3
              with:
                  token: ${{ env.CODECOV_TOKEN }}
                  flags: staging,unit,frontend
                  fail_ci_if_error: true

    frontend-deploy-staging:
        name: Deploy frontend to staging environment
        needs: frontend-test
        runs-on: ubuntu-latest
        environment: Staging
        permissions:
            id-token: write
            contents: read

        defaults:
            run:
                working-directory: frontend

        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - name: Create .env-file
              run: |
                  echo "REACT_APP_BACKEND_URL=$BACKEND_URL" >> .env
            - run: npm run build:ci
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  role-to-assume: ${{ env.AWS_STAGING_ROLE_TO_ASSUME }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Copy files to the S3 with the AWS CLI
              run: |
                  aws s3 sync ./build s3://${{ env.FRONTEND_BUCKET }}

    check-style-backend:
        name: Check backend code style
        needs: scan-code
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run prettier:backend

    backend-lint:
        name: Lint backend
        needs: scan-code
        runs-on: ubuntu-latest

        defaults:
            run:
                working-directory: backend

        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run lint

    backend-validate-swagger:
        name: Validate Swagger/OpenAPI
        needs: scan-code
        runs-on: ubuntu-latest

        defaults:
            run:
                working-directory: backend

        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npx swagger-cli validate ./src/routes/v1/swagger_api_v1.json --yes

    backend-test:
        name: Test backend
        needs: [check-style-backend, backend-lint, backend-validate-swagger]
        runs-on: ubuntu-latest

        defaults:
            run:
                working-directory: backend

        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - run: npm ci
            - run: npm run test:coverage
            - uses: codecov/codecov-action@v3
              with:
                  token: ${{ env.CODECOV_TOKEN }}
                  flags: staging,unit,backend
                  fail_ci_if_error: true

    backend-build-staging:
        name: Build and push backend
        needs: backend-test
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read

        defaults:
            run:
                working-directory: backend

        steps:
            - name: Checkout Repo
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  role-to-assume: ${{ env.AWS_STAGING_ROLE_TO_ASSUME }}
                  aws-region: eu-north-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    backend-deploy-staging:
        name: Deploy backend to staging environment
        needs: backend-build-staging
        runs-on: ubuntu-latest
        environment: Staging
        permissions:
            id-token: write
            contents: read

        steps:
            - name: Checkout Repo
              uses: actions/checkout@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  role-to-assume: ${{ env.AWS_STAGING_ROLE_TO_ASSUME }}
                  aws-region: eu-north-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Download task definition
              id: download-task
              run: |
                  aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK }} --query taskDefinition > task-definition.json
                  echo "revision=$(($(cat task-definition.json | jq .revision) - 1))" >> $GITHUB_OUTPUT

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              with:
                  task-definition: task-definition.json
                  container-name: ${{ env.CONTAINER_NAME }}
                  image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  service: ${{ env.ECS_SERVICE }}
                  cluster: ${{ env.ECS_CLUSTER }}
                  wait-for-service-stability: false

            - name: De-register previous revision
              if: ${{ steps.download-task.outputs.revision > 0 }}
              run: |
                  aws ecs deregister-task-definition --task-definition ${{ env.ECS_TASK }}:${{ steps.download-task.outputs.revision }}

    migrate-staging-database:
        name: Migrate changes to staging database
        needs: backend-build-staging
        runs-on: ubuntu-latest
        environment: Staging

        defaults:
            run:
                working-directory: backend

        steps:
            - name: Checkout Repo
              uses: actions/checkout@v3
            - name: Setup node
              uses: actions/setup-node@main
              with:
                  node-version: lts/*
                  cache: npm
            - name: Migrate database
              run: npx prisma migrate deploy
              env:
                  DATABASE_URL: ${{ env.DATABASE_URL }}
