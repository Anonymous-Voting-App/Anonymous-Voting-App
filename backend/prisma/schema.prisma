generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Poll {
  id          String     @id @default(uuid()) @db.Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  creatorId   String     @db.Uuid
  adminLink   String
  pollLink    String
  resultLink  String
  isActive    Boolean    @default(true)
  answerCount Int        @default(0)
  creator     User       @relation("PollUser", fields: [creatorId], references: [id], onDelete: Cascade)
  questions   Question[] @relation("PollQuestions")
  visualFlags String[]
}

model Question {
  id           String     @id @default(uuid()) @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  pollId       String     @db.Uuid
  maxValue     Float?
  minValue     Float?
  parentId     String?    @db.Uuid
  step         Float?
  typeName     String     @default("free")
  description  String     @default("")
  title        String     @default("")
  visualType   String     @default("default")
  parent       Question?  @relation("SubQuestions", fields: [parentId], references: [id], onDelete: Cascade)
  poll         Poll       @relation("PollQuestions", fields: [pollId], references: [id], onDelete: Cascade)
  options      Option[]   @relation("QuestionOptions")
  subQuestions Question[] @relation("SubQuestions")
  votes        Vote[]     @relation("QuestionVotes")
}

model Option {
  id         String   @id @default(uuid()) @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  questionId String   @db.Uuid
  option     String
  question   Question @relation("QuestionOptions", fields: [questionId], references: [id])
}

model Vote {
  id         String   @id @default(uuid()) @db.Uuid
  createdAt  DateTime @default(now())
  questionId String   @db.Uuid
  value      String
  voterId    String   @db.Uuid
  parentId   String?  @db.Uuid
  pollId     String   @db.Uuid
  parent     Vote?    @relation("SubVotes", fields: [parentId], references: [id], onDelete: Cascade)
  question   Question @relation("QuestionVotes", fields: [questionId], references: [id], onDelete: Cascade)
  subVotes   Vote[]   @relation("SubVotes")
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String   @unique
  emailVerified Boolean  @default(false)
  password      String
  polls         Poll[]   @relation("PollUser")
  username      String   @unique
  firstname     String
  lastname      String
  isAdmin       Boolean  @default(false)
}

model Fingerprint {
  id                  String   @id @default(uuid()) @db.Uuid
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  ip                  String   @default("")
  idCookie            String   @default("")
  fingerprintJsId     String   @default("")
}